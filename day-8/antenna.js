/*
const input = `............
........0...
.....0......
.......0....
....0.......
......A.....
............
............
........A...
.........A..
............
............`;
*/

const input = `...............e.........................i........
...............................1.......i.0........
..............................s.0......d..........
........................i....B.I............d.....
.............................s....................
................J.................................
.....................L.....0i.......4...d.........
.N...e...........................s..R.....4.....I.
........e.........v................1......R....I..
.............G..............0.....1...............
..2...N.............B......................4...R..
..............2...................N..........4s...
..p...................................1..b..I.....
..................p...........B........b...R......
....................................b.............
........W.......C.....w...........................
............7....u.............B..................
...W.................u......................bw....
.......p.2...........v......................9.....
.E.....C....u................................9....
E....Y................u.D........9...........J....
.......2..........................................
............................J.................c...
.............7...K..D..............J..............
.....C.Wq........t.................T..............
............Yt......v.............................
..W......................3...............w........
..7.....j................T...D.....n......8.....c.
.........E...............nTD......................
...r....E..........Y............n.......P........c
......K........G......L...........................
......................G.....L....v................
..............G...t......q.............l.8........
......................q............l..............
...6........r.............................w..c....
..6.........3.......Qk........T...................
......Y...............j.................n.........
..K.....S.....r......j.....U......9.l......8......
........................U......................P..
.....................q............................
.......K......5..N.....j.7.Q......................
...................p..k...U..........L.Q..........
.r......3...S.......k........y....8U....Q.......P.
.......S....g..3..................................
.....S..........gk................................
................5...................yP............
.......................g......yV..l...............
.........6.5...............V......................
..................6..5..V.........................
.............g.......................y..........V.`;

const map = input.split("\n").map((line) => line.split(""));
const locationUsed = [];
for (let i = 0; i < map.length; i++) {
    locationUsed[i] = Array(map[0].length + 1).fill(false);
}

const withinMap = (p) =>
    p.x >= 0 && p.x < map[0].length && p.y >= 0 && p.y < map.length;

const antennas = new Map();

for (let y = 0; y < map.length; y++) {
    for (let x = 0; x < map[y].length; x++) {
        if (map[y][x] === ".") continue;

        const list = antennas.get(map[y][x]) || [];
        list.push({ x, y });
        antennas.set(map[y][x], list);
    }
}

// part 1
// const antinodes = [];
// for (const key of antennas.keys()) {
//     const list = antennas.get(key);
//     for (let i = 0; i < list.length; i++) {
//         for (let j = 0; j < list.length; j++) {
//             if (i === j) continue;
//             const p1 = list[i];
//             const p2 = list[j];
//             const antinode = {
//                 x: p1.x + 2 * (p2.x - p1.x),
//                 y: p1.y + 2 * (p2.y - p1.y),
//             };
//             if (withinMap(antinode) && !locationUsed[antinode.y][antinode.x]) {
//                 antinodes.push(antinode);
//                 locationUsed[antinode.y][antinode.x] = true;
//             }
//         }
//     }
// }

// part 2
const antinodes = [];
for (const key of antennas.keys()) {
    const list = antennas.get(key);
    for (let i = 0; i < list.length; i++) {
        const p1 = list[i];

        if (!locationUsed[p1.y][p1.x]) {
            antinodes.push(p1);
            locationUsed[p1.y][p1.x] = true;
        }

        for (let j = 0; j < list.length; j++) {
            if (i === j) continue;
            const p2 = list[j];
            let m = 2;
            while (true) {
                const antinode = {
                    x: p1.x + m * (p2.x - p1.x),
                    y: p1.y + m * (p2.y - p1.y),
                };
                if (!withinMap(antinode)) break;
                if (!locationUsed[antinode.y][antinode.x]) {
                    antinodes.push(antinode);
                    locationUsed[antinode.y][antinode.x] = true;
                }
                m++;
            }
        }
    }
}

console.log(antinodes);
console.log(antinodes.length);
