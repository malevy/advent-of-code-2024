/*
// score = 4
const input = `..90..9
...1.98
...2..7
6543456
765.987
876....
987....`;
*/

/*
// score = 3
const input = `10..9..
2...8..
3...7..
4567654
...8..3
...9..2
.....01`;
*/

/*
// score = 36
const input = `89010123
78121874
87430965
96549874
45678903
32019012
01329801
10456732`;
*/

// score = 514
const input = `652101223431010123212787018120123432102123
743012214321123434303692189011014501343012
898129805010698543214543274320329691256765
210036776234567690165567865411298780269834
378945689103698789876458976502332109100121
463210187892789870122345689965423458236780
554109096701098565031018769876210967745698
695678125432145678540019810567305870894327
788987030120130989654321001498456701765016
018976546543221078765478212312565432120145
327348987012344569876569801108976789013237
456256780109853078903478412217789676567898
216107891238762169012894323306587987401298
307898994345667654321765401455496096300347
456767287454108991210101232960345145212456
378950106543211280890810345871232234336765
567843217017870376721987496432821101123898
454107898726965445432896587501910787034567
303210789634231030567801457601801896543298
211023676540142121056932368212769787432109
072124545035658762346541079345678891001876
189433032123769654390670988454501762018967
276542121054898323481787643367432053323458
345633654765433210672696652298749144310549
498726547890121306543545781121878235699632
765017630987010129401235690030965456788701
834198921256100438767624510549854307890123
920183210343221245658913025678123210019834
813274101254234986541002134765089876521765
104565431069145875632101098834456785430345
211278922378036780749812367903321896101216
810189810467929891898701456512010787236707
983210123567810432325600210105677698945898
874301034512345587014511343234988767650789
765212965403476696523329858943439656501090
650163874301984785489834767652034565432781
543254989218943210390765789621129210345652
432167878307654101281087656780098761231243
545089861056743105672390543890145687650987
456778352149892234365401232763230896501276
327863243434501345696543201054221245434345
018954100123410210787894102343101230123656`;

const map = input
    .split("\n")
    .map((line) => line.split("").map((c) => (c === "." ? "-1" : c)))
    .map((line) => line.map(Number));

// find all the trail heads
const trailHeads = [];
for (let y = 0; y < map.length; y++) {
    for (let x = 0; x < map[y].length; x++) {
        if (map[y][x] === 0) {
            trailHeads.push({ x, y });
        }
    }
}

let totalScore = 0;
for (let head of trailHeads) {
    totalScore += walkTrail(head);
    resetEnds();
}

console.log(totalScore);

function isPointInbounds(point) {
    return (
        point.x >= 0 &&
        point.x < map[0].length &&
        point.y >= 0 &&
        point.y < map.length
    );
}

function walkTrail(onPos) {
    const offsets = [
        { x: 0, y: -1 }, // up
        { x: 1, y: 0 }, // right
        { x: 0, y: 1 }, // down
        { x: -1, y: 0 }, // left
    ];

    const currentValue = map[onPos.y][onPos.x];
    let reachable = 0;
    for (let offset of offsets) {
        const nextPos = { x: onPos.x + offset.x, y: onPos.y + offset.y };
        if (!isPointInbounds(nextPos)) {
            continue;
        }

        const nextValue = map[nextPos.y][nextPos.x];

        if (nextValue === currentValue + 1) {
            if (nextValue === 9) {
                reachable++;
                // map[nextPos.y][nextPos.x] = -1 * map[nextPos.y][nextPos.x];
            } else {
                reachable += walkTrail(nextPos);
            }
        }
    }

    return reachable;
}

function resetEnds() {
    for (let y = 0; y < map.length; y++) {
        for (let x = 0; x < map[y].length; x++) {
            if (map[y][x] === -9) {
                map[y][x] = 9;
            }
        }
    }
}
